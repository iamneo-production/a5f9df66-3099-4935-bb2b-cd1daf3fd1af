package com.foodmenu.food.controller;

	import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.http.HttpStatus;
	import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
	import org.springframework.web.bind.annotation.GetMapping;
	import org.springframework.web.bind.annotation.PathVariable;
	import org.springframework.web.bind.annotation.PostMapping;
	import org.springframework.web.bind.annotation.PutMapping;
	import org.springframework.web.bind.annotation.RequestBody;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.ResourceAccessException;

import com.foodmenu.food.exception.ResourceNotFoundException;
import com.foodmenu.food.model.Addon;
import com.foodmenu.food.model.Message;
import com.foodmenu.food.repository.AddonRepository;
import com.foodmenu.food.service.AddonService;


	
	

	@RestController
	@RequestMapping("/admin")
	@CrossOrigin(allowedHeaders="*" ,origins="*")
	public class AddonController {
		
		@Autowired
		AddonService foodServices;
		@Autowired
		private AddonRepository foodRepository;
		@PostMapping("/addAddon")
		
		public ResponseEntity<Message> addNewFood(@RequestBody Addon food) {
			try {
				Addon returnedFood = foodServices.saveFood(food);
				
				return new ResponseEntity<Message>(new Message("Upload Successfully!", 
												Arrays.asList(returnedFood), ""), HttpStatus.OK);
			}catch(Exception e) {
				return new ResponseEntity<Message>(new Message("Fail to post a new Customer!", 
												null, e.getMessage()), HttpStatus.INTERNAL_SERVER_ERROR);			
			}
		}
		
		@GetMapping("/retrieveinfos")
		
		public ResponseEntity<Message> retrieveFoodInfo() {
			
			try {
				List<Addon> foodInfos = foodServices.getFoodInfos();
				
				return new ResponseEntity<Message>(new Message("Get Food' Infos!", 
													foodInfos, ""), HttpStatus.OK);
			}catch(Exception e) {
				return new ResponseEntity<Message>(new Message("Fail!",
													null, e.getMessage()), HttpStatus.INTERNAL_SERVER_ERROR);
			}
		}
		@GetMapping("/getAddon")
		public List<Addon> getAllEmployees(){
			return foodRepository.findAll();
		}
		/*
		@GetMapping("/employees/{id}")
		public ResponseEntity<Food> getEmployeeById(@PathVariable Long id) {
			Food food = foodRepository.findById(id)
					.orElseThrow(() -> new ResourceAccessException("Employee not exist with id :" + id));
			return ResponseEntity.ok(food);
		}
		
		@GetMapping("/findone/{id}")
		public ResponseEntity<Message> getFoodById(@PathVariable long id) {
			try {
				Optional<Food> optFood = foodServices.getFoodById(id);
				
				if(optFood.isPresent()) {
					return new ResponseEntity<Message>(new Message("Successfully! Retrieve a food by id = " + id,
																Arrays.asList(optFood.get()), ""), HttpStatus.OK);
				} else {
					return new ResponseEntity<Message>(new Message("Failure -> NOT Found a food by id = " + id,
							null, ""), HttpStatus.NOT_FOUND);
				}
			}catch(Exception e) {
				return new ResponseEntity<Message>(new Message("Failure",
						null, e.getMessage()), HttpStatus.INTERNAL_SERVER_ERROR);
			}
		}
		*/
		
		@DeleteMapping("/deleteAddon/{id}")
		public ResponseEntity<Map<String, Boolean>> deleteEmployee(@PathVariable Long id){
			Addon food = foodRepository.findById(id)
					.orElseThrow(() -> new ResourceNotFoundException("Employee not exist with id :" + id));
			
			foodRepository.delete(food);
			Map<String, Boolean> response = new HashMap<>();
			response.put("deleted", Boolean.TRUE);
			return ResponseEntity.ok(response);
		}
		/*
		@DeleteMapping("/deletebyid/{id}")
		public ResponseEntity<Message> deleteFoodById(@PathVariable long id) {
			try {
				// checking the existed of a Customer with id
				if(foodServices.checkExistedFood(id)) {
					foodServices.deleteFoodById(id);
					
					return new ResponseEntity<Message> (new Message("Successfully! Delete a Food with id = " + id, 
															null, ""), HttpStatus.OK);
				}else {
					return new ResponseEntity<Message>(new Message("Failer! Can NOT Found a Customer "
															+ "with id = " + id, null, ""), HttpStatus.NOT_FOUND);
				}
			}catch(Exception e) {
				return new ResponseEntity<Message>(new Message("Failure",
						null, e.getMessage()), HttpStatus.INTERNAL_SERVER_ERROR);
			}
		}*/
		
		@PutMapping("/editAddon/{id}")
		public ResponseEntity<Message> updateCustomerById(@RequestBody Addon _food, 
																		@PathVariable long id) {
			try {
				if(foodServices.checkExistedFood(id)) {
					Addon food = foodServices.getFoodById(id).get();
					
					//set new values for customer
					
					food.setName(_food.getName());
					food.setPrice(_food.getPrice());
					food.setImage(_food.getImage());
					
		
					// save the change to database
					foodServices.updateFood(food);
					
					return new ResponseEntity<Message>(new Message("Successfully! Updated a Add_on "
																			+ "with id = " + id,
																		Arrays.asList(food), ""), HttpStatus.OK);
				}else {
					return new ResponseEntity<Message>(new Message("Failer! Can NOT Found a Customer "
							+ "with id = " + id,
						null, ""), HttpStatus.NOT_FOUND);
				}
			}catch(Exception e) {
				return new ResponseEntity<Message>(new Message("Failure",
						null, e.getMessage()), HttpStatus.INTERNAL_SERVER_ERROR);			
			}
		}
		/*
		@PutMapping("/updateStudents/{id}")
		public Food updateStudent(@RequestBody Food student,@PathVariable long id) {
			Food food = foodServices.getFoodById(id).get();
			
			//set new values for customer
			
			food.setName(food.getName());
			food.setPrice(food.getPrice());
			food.setImage(food.getImage());
			

			// save the change to database
			foodServices.updateFood(food);
			return  foodServices.updateStudent(student,id);
		}*/
		
		
	}